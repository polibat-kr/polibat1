# PoliBAT Admin 개발 규칙

## 🎯 핵심 원칙

### 1. 시스템적 오류 해결
- **단일 오류 발견 시 → 전체 코드베이스에서 동일 패턴 모두 수정**
- 예: undefined 오류 하나 발견 → 모든 컴포넌트의 유사 패턴 검토 및 수정

### 2. 안전한 코드 작성
```typescript
// ✅ 필수: 옵셔널 체이닝(?.)과 기본값(||, ??) 사용
const value = data?.nested?.property || defaultValue;

// ✅ 배열: 반드시 검증 후 사용
{Array.isArray(items) && items.length > 0 ? 
  items.map(item => <Component key={item.id} />) : 
  <EmptyState />
}

// ✅ 객체 매핑에서 기본값 제공 (TypeScript undefined 에러 방지)
const itemColor = colorMapping[item as keyof typeof colorMapping] || defaultColor;
// 또는 옵셔널 체이닝 사용
const borderColor = itemColors?.border || 'rgb(107, 114, 128)';

// ✅ 조건부 렌더링에서 안전한 접근
{itemColor?.label && (
  <span className={itemColor.label}>텍스트</span>
)}

// ❌ 금지: 직접 속성 접근
const value = data.nested.property; // 위험!
const color = colorMapping[item].border; // TypeScript 에러 발생 가능!
```

### 2-1. TypeScript undefined 에러 방지 필수 규칙
- **객체 매핑 시 반드시 기본값 제공**: `mapping[key] || defaultValue`
- **옵셔널 체이닝 적극 활용**: `object?.property?.subProperty`
- **조건부 접근 시 존재 확인**: `value && value.property`
- **배열/객체 검증 후 사용**: `Array.isArray()`, `typeof obj === 'object'`

### 3. TypeScript 엄격 활용
- any 타입 최소화, 구체적 인터페이스 정의
- props 타입 명확히 정의
- 옵셔널 속성(?) 적절히 활용

### 4. 한국어 UI/UX
- 모든 UI 텍스트는 한국어
- 날짜/숫자는 한국 표준 형식
- 에러 메시지도 한국어로 표시

### 5. 필터 UI 일관성 규칙 (필수)
- **필터 추가 시 반드시 3가지 동시 적용**:
  1. 필터 state 변수 및 setter 함수 정의
  2. 적용된 필터 표시에 해당 필터 조건 추가
  3. 필터 초기화 버튼에 해당 필터 reset 로직 추가

```typescript
// ✅ 필터 추가 시 필수 체크리스트
// 1. State 정의
const [newFilter, setNewFilter] = useState('전체');

// 2. 적용된 필터 표시 조건에 추가
{(기존필터 || newFilter !== '전체') && (
  // 필터 표시 UI
  {newFilter !== '전체' && (
    <span>새필터: {newFilter}</span>
  )}
)}

// 3. 필터 초기화에 추가  
onClick={() => {
  setExistingFilter('전체');
  setNewFilter('전체'); // ✅ 반드시 추가
}}
```

- **필터 개발 후 반드시 확인**: 모든 필터가 적용된 필터 영역에 표시되는가?
- **URL 파라미터 연동 시**: beforeStatus, afterStatus 등 모든 필터 파라미터 처리

## 📊 비즈니스 규칙 (정치방망이)

### 프로젝트 정보
- **도메인**: www.polibat.com
- **미션**: 국민과 정치인이 부담 없이 소통하는 플랫폼
- **타겟**: 386세대 이후 중심
- **현재 단계**: 프론트엔드 개발 (백엔드 제외)

### 주요 메뉴 구조
1. **자유게시판**: 모든 사용자의 자유로운 의견 교환
2. **정치인게시판**: 정치인 지목 글 작성 및 답변
3. **투표**: 유쾌한 정치 관련 투표

### ID 체계 (6자리 고정)
```
회원:
- 일반회원: NM000001 (Normal Member)
- 정치인: PM000001 (Politician Member)  
- 보좌진: PA000001 (Politician Assistant)

게시판:
- 자유게시판: FB000001 (Free Board)
- 정치인게시판: PB000001 (Politician Board)
- 댓글: FB000001-CM0001 (상위ID-Comment)

기타:
- 투표: VP000001 (Vote Poll)
- 공지: NT000001 (Notice)
- 팝업: PU000001 (Popup)
- 배너: BN000001 (Banner)
```

### 상태 코드
```typescript
// 회원 상태
type MemberStatus = '승인' | '승인대기' | '탈퇴' | '정지' | '강퇴';

// 게시글 상태  
type PostStatus = '게시' | '게시(고정)' | '숨김' | '삭제';

// 투표 상태
type VoteStatus = '진행' | '마감' | '예정';

// 조치 상태
type ActionStatus = '접수대기' | '검토중' | '처리완료' | '처리불가' | '추후검토';
```

### 구분값
```typescript
// 정치인 유형
type PoliticianType = '국회의원' | '지자체' | '대통령실';

// 회원 유형
type MemberType = '일반회원' | '정치인' | '보좌진' | '운영자';

// 공지 말머리
type NoticeCategory = '이용안내' | '업데이트' | '소통소식' | '외부활동';

// 불편/제안 유형
type ReportType = '기능제안' | '불편사항' | '투표제안';
```

## 🛡️ 파일 안전성 보장 규칙 (필수)

### 파일 인코딩 및 손상 방지
- **❌ 절대 금지**: PowerShell이나 터미널에서 정규식으로 파일 내용 직접 수정
- **❌ 절대 금지**: sed, awk, 정규식 치환 등으로 대용량 파일 수정
- **❌ 절대 금지**: 한 번에 여러 파일을 일괄 처리하는 스크립트 실행
- **✅ 필수**: edit_file, search_replace 도구만 사용하여 파일 수정
- **✅ 필수**: 대용량 파일(1000줄 이상)은 반드시 부분별로 나누어 수정
- **✅ 필수**: 파일 수정 전 반드시 백업 또는 git commit 확인

### 안전한 파일 수정 절차
1. **수정 전 검증**: 파일 크기와 내용 확인
2. **단계별 수정**: 한 번에 하나의 함수/섹션만 수정
3. **즉시 검증**: 수정 후 파일 상태 확인
4. **문제 발생 시**: 즉시 중단하고 사용자에게 보고

### 대용량 파일 처리 규칙
- **1000줄 이상 파일**: 반드시 섹션별로 나누어 처리
- **복잡한 수정**: 여러 단계로 나누어 진행
- **실시간 검증**: 각 단계마다 파일 상태 확인

## ✅ 개발 체크리스트
- [ ] 모든 데이터 접근이 안전한가? (옵셔널 체이닝 사용)
- [ ] 배열 처리 전 검증했는가? (Array.isArray)
- [ ] 유사 패턴을 전체 검토했는가?
- [ ] 타입이 명확히 정의되었는가?
- [ ] UI 텍스트가 모두 한국어인가?
- [ ] ID 체계를 올바르게 사용했는가?
- [ ] 비즈니스 로직이 정치방망이 컨셉에 맞는가?
- [ ] 파일 수정 시 안전성 규칙을 준수했는가?

## 🔄 작업 완전성 보장 규칙 (필수)
- **전체 코드베이스 수정 요청 시**: 모든 관련 파일을 빠짐없이 완료할 때까지 진행
- **중간 체크 금지**: 사용자가 명확한 중단 신호를 주지 않는 한 끝까지 진행
- **완료 확인**: "전체", "모든", "공통적으로" 등의 키워드가 있으면 100% 완료 필수
- **진행 상황 보고**: 작업 중간에 진행률을 물어볼 경우에만 상황 체크

## 📋 공통 UI 패턴 적용 체크리스트 (필수)
**목록 화면 개발/수정 시 반드시 확인**:

### 1. 일시 검색조건 체크
- [ ] 테이블에 날짜/일시 컬럼이 있는가? (가입일, 작성일, 수정일, 시작일, 종료일 등)
- [ ] 해당 일시에 대한 검색조건(기간 선택)이 있는가?
- [ ] dateType, periodFilter, dateStartDate, dateEndDate state가 있는가?
- [ ] 필터링 로직에 날짜 범위 검증이 포함되어 있는가?

### 2. 적용된 필터 섹션 체크  
- [ ] 모든 검색조건이 "적용된 필터"에 표시되는가?
- [ ] "필터 초기화" 버튼이 모든 state를 리셋하는가?
- [ ] 새로운 필터 추가 시 3가지 동시 적용했는가? (state, 적용된 필터 표시, 초기화 로직)

### 3. 상단 카드 클릭 기능 체크
- [ ] 상단 통계 카드가 있는가?
- [ ] 각 카드 클릭 시 해당 검색조건이 적용되는가?
- [ ] onClick 핸들러와 hover 효과가 있는가?

### 4. 검색조건 라벨 표준화 체크
- [ ] 모든 input/select에 명확한 label이 있는가?
- [ ] option 값에서 불필요한 prefix가 제거되었는가? (예: "상태: 전체" → "전체")

### 5. 완료 검증 체크
- [ ] 비슷한 다른 페이지들과 일관성이 있는가?
- [ ] 사용자 요구사항의 모든 항목이 구현되었는가?
- [ ] 테스트 해보며 누락된 기능이 없는가?

## 🔗 페이지 간 연동 완전성 보장 규칙 (필수)

### 파라미터 전달-수신 완전성 체크
- **❌ 절대 금지**: 파라미터 전달만 구현하고 끝내기
- **✅ 필수**: 전달하는 페이지 + 받는 페이지 모두 구현
- **✅ 필수**: URL 파라미터 → 검색조건 자동 설정까지 완료

### 사용자 시나리오 검증 (필수)
1. **클릭 동작**: 사용자가 버튼/링크를 클릭한다
2. **페이지 이동**: 올바른 페이지로 이동한다  
3. **조건 반영**: 전달받은 파라미터가 검색조건에 자동 설정된다
4. **결과 표시**: 해당 조건으로 필터링된 결과가 즉시 보인다

### 연동 구현 체크리스트
- [ ] 송신: handleClick 함수에서 파라미터 구성 완료
- [ ] 전달: window.open으로 URL 파라미터 전달 완료
- [ ] 수신: useEffect + URLSearchParams로 파라미터 읽기 완료
- [ ] 적용: 받은 파라미터를 state에 설정 완료
- [ ] 반영: 설정된 state로 데이터 필터링 완료
- [ ] 검증: 실제 사용자 플로우로 테스트 완료

### 완전성 보장 원칙
- **"A에서 B로 이동"** 요구사항 시 → A의 전달 + B의 수신 모두 구현
- **"조건을 넘겨서"** 요구사항 시 → 넘기기 + 받아서 적용까지 구현  
- **"클릭하면 해당 화면으로"** 요구사항 시 → 이동 + 조건 반영까지 구현

## 📅 비즈니스 로직 일관성 보장 규칙 (필수)

### 기간/날짜 처리 표준화 (필수)
- **❌ 절대 금지**: 동일한 비즈니스 로직을 다르게 구현
- **✅ 필수**: 기존 올바른 구현이 있으면 반드시 참조하여 일관성 유지
- **✅ 필수**: 기간 처리 시 명확한 정의 확인

### 표준 기간 정의 (PoliBAT 시스템)
```typescript
// 표준 기간 처리 로직 - 모든 페이지에서 동일하게 적용
switch (period) {
  case '일간':
    // 오늘 하루 데이터 (시작일 = 종료일 = 오늘)
    startDate = new Date(today);
    break;
  case '주간':
    // 지난 7일간 데이터 (시작일 = 7일 전, 종료일 = 오늘)
    startDate.setDate(today.getDate() - 7);
    break;
  case '월간':
    // 지난 1개월간 데이터 (시작일 = 1개월 전, 종료일 = 오늘)
    startDate.setMonth(today.getMonth() - 1);
    break;
  case '연간':
    // 지난 1년간 데이터 (시작일 = 1년 전, 종료일 = 오늘)
    startDate.setFullYear(today.getFullYear() - 1);
    break;
}
```

### 비즈니스 로직 구현 체크리스트
- [ ] 동일한 기능이 다른 페이지에 이미 구현되어 있는가?
- [ ] 기존 구현과 일관성을 유지하고 있는가?
- [ ] 비즈니스 정의(일간=오늘 하루)를 정확히 반영했는가?
- [ ] 실제 결과값을 확인했는가? (URL, 화면 필터 상태 등)

### 코드 재사용 및 참조 원칙
- **신규 구현 전 필수 확인**: `grep_search`로 유사 기능 검색
- **기존 구현 발견 시**: 해당 로직을 참조하여 일관성 유지
- **차이점 발견 시**: 비즈니스 정의를 재확인하고 올바른 방향으로 통일

### 검증 필수 절차
1. **논리 검증**: 비즈니스 정의에 맞는 구현인가?
2. **일관성 검증**: 다른 페이지와 동일한 로직인가?
3. **결과 검증**: 실제 동작이 예상과 일치하는가?
4. **사용자 시나리오 검증**: 클릭 → 이동 → 필터 설정까지 완전한가? 

## 🎨 UI 일관성 보장 규칙 (필수)

### 1. 페이지 레이아웃 표준 순서 (절대 준수)
모든 목록 페이지는 반드시 다음 순서로 구성:
```
1. 페이지 헤더 (제목, 설명, 새로고침/내보내기 버튼)
2. 통계 카드 (상단 카드들)
3. 검색 및 필터 (검색조건 입력 영역)
4. 테이블/목록 (실제 데이터 표시)
```

- **❌ 절대 금지**: 카드를 검색조건 아래 배치
- **✅ 필수**: 카드는 항상 검색조건 위에 배치
- **참조 페이지**: LikesHistoryPage, PoliticiansPage

### 2. 통계 카드 아이콘 표준화 (필수)
회원 관련 아이콘은 반드시 표준 아이콘 사용:
```typescript
// ✅ 표준 아이콘 매핑
const MEMBER_ICONS = {
  '전체회원': 'Users',      // 복수 사용자
  '일반회원': 'User',       // 단일 사용자  
  '정치인': 'Crown',        // 왕관 (정치인 상징)
  '보좌진': 'UserCheck',    // 체크된 사용자
  '승인대기': 'Clock',      // 시계 (대기 상태)
  '정치인+보좌진': 'Users'  // 복수 사용자
};
```

- **색상 표준화**: blue(전체), green(일반), purple(정치인), indigo(보좌진), yellow(대기상태)
- **크기 통일**: `w-8 h-8` 필수
- **hover 효과**: `hover:bg-gray-50` 표준 적용

### 3. 카드 클릭 로직 표준화 (필수)
정치인/보좌진 관련 필터링 시 승인 상태 로직 준수:
```typescript
// ✅ 표준 필터링 로직
const handleCardClick = (filterType: string, filterValue: string) => {
  // 1. 검색조건 초기화 (필수)
  setSearchTerm('');
  setPeriodFilter('전체');
  setDateStartDate('');
  setDateEndDate('');
  setCurrentPage(1);
  
  // 2. 필터 설정
  if (filterType === 'status') {
    setStatusFilter(filterValue);
    setTypeFilter('전체');
  } else if (filterType === 'type') {
    setTypeFilter(filterValue);
    setStatusFilter('승인'); // ✅ 정치인/보좌진은 승인된 회원만
  } else if (filterType === 'all') {
    setStatusFilter('전체');
    setTypeFilter('전체');
  }
};
```

- **승인 로직**: 정치인/보좌진 카드 클릭 시 `setStatusFilter('승인')` 필수
- **승인대기 로직**: 승인대기 카드는 `setStatusFilter('승인대기')` 설정
- **초기화 로직**: 검색어, 기간, 날짜, 페이지 모두 초기화

### 4. 카드 스타일 표준화 (필수)
```typescript
// ✅ 표준 카드 스타일
className="bg-white p-6 rounded-lg shadow-sm border border-gray-200 cursor-pointer hover:bg-gray-50"

// ❌ 금지되는 스타일
className="... hover:shadow-md transition-shadow" // 다른 페이지와 불일치
className="... p-4 ..." // 패딩 크기 불일치
```

### 5. UI 일관성 체크리스트 (필수)
새로운 목록 페이지 개발 또는 기존 페이지 수정 시:
- [ ] 카드가 검색조건 위에 배치되어 있는가?
- [ ] 회원 관련 아이콘이 표준 매핑을 따르는가?
- [ ] 카드 클릭 시 승인 상태 로직이 올바른가?
- [ ] 카드 스타일이 다른 페이지와 일치하는가?
- [ ] hover 효과가 표준을 따르는가?

### 6. 기존 페이지 참조 원칙 (필수)
- **신규 개발 시**: LikesHistoryPage, PoliticiansPage 레이아웃 참조
- **수정 시**: 동일한 기능의 다른 페이지와 비교하여 일관성 확인
- **아이콘 선택 시**: 위 표준 아이콘 매핑 반드시 준수
- **의심 시**: 다른 페이지들과 일관성 재확인 후 진행 